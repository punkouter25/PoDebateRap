@using PoDebateRap.Shared.Models
@inject ILogger<ResultsModal> Logger

<!-- Results Display Modal using standard HTML/CSS -->
<div class="modal-backdrop"></div>
<div class="modal show" tabindex="-1" style="display: block;">
    <div class="modal-dialog modal-dialog-centered modal-lg"> @* Make modal larger for stats *@
        <div class="modal-content" style="background-color: #1f1f1f; color: var(--text-color); border: 1px solid var(--border-color);">
            <div class="modal-header" style="border-bottom-color: var(--border-color);">
                <h5 class="modal-title w-100 text-center" style="font-family: var(--header-font); color: var(--primary-color);">Debate Results</h5>
            </div>
            <div class="modal-body text-center">
                @* Ensure @() syntax is used for expressions with null-coalescing *@
                <p>The debate on '<strong>@(TopicTitle ?? "the topic")</strong>' between <strong>@(Rapper1Name ?? "Rapper 1")</strong> (Pro) and <strong>@(Rapper2Name ?? "Rapper 2")</strong> (Con) has concluded.</p>
                <hr style="border-top-color: var(--border-color);" />
                <h4>Judge's Decision:</h4>
                @if (!string.IsNullOrEmpty(WinnerName) && WinnerName != "Draw" && WinnerName != "Undecided" && WinnerName != "Error Judging" && WinnerName != "Error Parsing" && WinnerName != "Stats Error")
                {
                     @* Ensure simple @ syntax is used for direct variable output *@
                    <p class="fs-4" style="color: var(--primary-color);"><strong>@WinnerName wins!</strong></p>
                }
                else if (WinnerName == "Draw")
                {
                     <p class="fs-4 text-warning">It's a Draw!</p>
                }
                else if (WinnerName == "Undecided")
                {
                     <p class="fs-5 text-muted">The judge was undecided.</p>
                }
                else
                {
                     <p class="fs-5 text-danger">There was an error determining or parsing the winner.</p>
                }

                @* Display Judge's Reasoning *@
                @if (!string.IsNullOrEmpty(JudgeReasoning))
                {
                    @* Ensure @() syntax is used for expressions *@
                    <p class="mt-3 fst-italic" style="color: var(--secondary-color);">"@(JudgeReasoning)"</p>
                }

                @* Display Stats Grid *@
                @if (Stats != null)
                {
                    <hr style="border-top-color: var(--border-color);" />
                    <h5>Debate Stats (1-5)</h5>
                    <table class="table table-sm table-bordered mt-3" style="color: var(--text-color); border-color: var(--border-color);">
                        <thead style="background-color: #2a2a2a;">
                            <tr>
                                <th style="color: var(--primary-color); font-family: var(--header-font); border-color: var(--border-color);">Metric</th>
                                @* Ensure @() syntax is used for expressions with null-coalescing *@
                                <th style="color: var(--primary-color); font-family: var(--header-font); border-color: var(--border-color);">@(Rapper1Name ?? "Rapper 1") (Pro)</th>
                                <th style="color: var(--primary-color); font-family: var(--header-font); border-color: var(--border-color);">@(Rapper2Name ?? "Rapper 2") (Con)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Logic (R1/R2)</td>
                                <td>@Stats.Rapper1LogicScore</td>
                                <td>@Stats.Rapper2LogicScore</td>
                            </tr>
                            <tr>
                                <td>Sentiment Analysis</td>
                                <td>@Stats.Rapper1SentimentScore</td>
                                <td>@Stats.Rapper2SentimentScore</td>
                            </tr>
                            <tr>
                                <td>Adherence (Persona/Style)</td>
                                <td>@Stats.Rapper1AdherenceScore</td>
                                <td>@Stats.Rapper2AdherenceScore</td>
                            </tr>
                            <tr>
                                <td>Rebuttal Quality</td>
                                <td>@Stats.Rapper1RebuttalScore</td>
                                <td>@Stats.Rapper2RebuttalScore</td>
                            </tr>
                            <tr style="background-color: #333; font-weight: bold;"> @* Style total row *@
                                <td>TOTAL SCORE</td>
                                <td>@Stats.Rapper1TotalScore</td>
                                <td>@Stats.Rapper2TotalScore</td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                     <p class="text-muted mt-3"><small>(Stats could not be generated)</small></p>
                }
            </div>
            <div class="modal-footer" style="border-top-color: var(--border-color);">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    // Parameters to receive debate results
    [Parameter] public string? Rapper1Name { get; set; }
    [Parameter] public string? Rapper2Name { get; set; }
    [Parameter] public string? TopicTitle { get; set; }
    [Parameter] public string? WinnerName { get; set; }
    [Parameter] public string? JudgeReasoning { get; set; }
    [Parameter] public DebateStats? Stats { get; set; }
    [Parameter] public EventCallback OnClose { get; set; } // Callback for close button

    private async Task CloseModal()
    {
        Logger.LogInformation("Results modal close button clicked.");
        await OnClose.InvokeAsync();
    }
}

<!-- Basic modal styling (can be moved to app.css) -->
<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1040;
        width: 100vw;
        height: 100vh;
        background-color: #000;
        opacity: 0.75; /* Darker backdrop */
    }
    .modal.show {
        display: block;
    }
    .modal {
         position: fixed;
        top: 0;
        left: 0;
        z-index: 1050;
        width: 100%;
        height: 100%;
        overflow-x: hidden; /* Prevent horizontal scroll */
        overflow-y: auto; /* Allow vertical scroll if needed */
        outline: 0;
    }
    /* Ensure buttons use theme colors */
     .modal .btn-secondary {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        color: var(--text-color);
    }
     .modal .btn-secondary:hover {
        filter: brightness(90%);
    }
    /* Style table borders */
    .modal table th, .modal table td {
        border-color: var(--border-color) !important;
    }
</style>
